#include "native/glfw/Key.hpp"

#define GLFW_INCLUDE_NONE
#include "GLFW/glfw3.h"

using namespace nglpmt;

native::Key native::glfwToKey(const int& glfw_key){
    switch (glfw_key){
    /* Printable keys */
        case GLFW_KEY_SPACE: return Key::Space;
        case GLFW_KEY_APOSTROPHE: return Key::Apostrophe;
        case GLFW_KEY_COMMA: return Key::Comma;
        case GLFW_KEY_MINUS: return Key::Minus;
        case GLFW_KEY_PERIOD: return Key::Period;
        case GLFW_KEY_SLASH: return Key::Slash;
        case GLFW_KEY_0: return Key::_0;
        case GLFW_KEY_1: return Key::_1;
        case GLFW_KEY_2: return Key::_2;
        case GLFW_KEY_3: return Key::_3;
        case GLFW_KEY_4: return Key::_4;
        case GLFW_KEY_5: return Key::_5;
        case GLFW_KEY_6: return Key::_6;
        case GLFW_KEY_7: return Key::_7;
        case GLFW_KEY_8: return Key::_8;
        case GLFW_KEY_9: return Key::_9;
        case GLFW_KEY_SEMICOLON: return Key::Semicolon;
        case GLFW_KEY_EQUAL: return Key::Equal;
        case GLFW_KEY_A: return Key::A;
        case GLFW_KEY_B: return Key::B;
        case GLFW_KEY_C: return Key::C;
        case GLFW_KEY_D: return Key::D;
        case GLFW_KEY_E: return Key::E;
        case GLFW_KEY_F: return Key::F;
        case GLFW_KEY_G: return Key::G;
        case GLFW_KEY_H: return Key::H;
        case GLFW_KEY_I: return Key::I;
        case GLFW_KEY_J: return Key::J;
        case GLFW_KEY_K: return Key::K;
        case GLFW_KEY_L: return Key::L;
        case GLFW_KEY_M: return Key::M;
        case GLFW_KEY_N: return Key::N;
        case GLFW_KEY_O: return Key::O;
        case GLFW_KEY_P: return Key::P;
        case GLFW_KEY_Q: return Key::Q;
        case GLFW_KEY_R: return Key::R;
        case GLFW_KEY_S: return Key::S;
        case GLFW_KEY_T: return Key::T;
        case GLFW_KEY_U: return Key::U;
        case GLFW_KEY_V: return Key::V;
        case GLFW_KEY_W: return Key::W;
        case GLFW_KEY_X: return Key::X;
        case GLFW_KEY_Y: return Key::Y;
        case GLFW_KEY_Z: return Key::Z;
        case GLFW_KEY_LEFT_BRACKET: return Key::LeftBracket;
        case GLFW_KEY_BACKSLASH: return Key::Backslash;
        case GLFW_KEY_RIGHT_BRACKET: return Key::RightBracket;
        case GLFW_KEY_GRAVE_ACCENT: return Key::GraveAccent;
        case GLFW_KEY_WORLD_1: return Key::World_1;
        case GLFW_KEY_WORLD_2: return Key::World_2;

    /* Function keys */
        case GLFW_KEY_ESCAPE: return Key::Escape;
        case GLFW_KEY_ENTER: return Key::Enter;
        case GLFW_KEY_TAB: return Key::Tab;
        case GLFW_KEY_BACKSPACE: return Key::Backspace;
        case GLFW_KEY_INSERT: return Key::Insert;
        case GLFW_KEY_DELETE: return Key::Delete;
        case GLFW_KEY_RIGHT: return Key::Right;
        case GLFW_KEY_LEFT: return Key::Left;
        case GLFW_KEY_DOWN: return Key::Down;
        case GLFW_KEY_UP: return Key::Up;
        case GLFW_KEY_PAGE_UP: return Key::PageUp;
        case GLFW_KEY_PAGE_DOWN: return Key::PageDown;
        case GLFW_KEY_HOME: return Key::Home;
        case GLFW_KEY_END: return Key::End;
        case GLFW_KEY_CAPS_LOCK: return Key::CapsLock;
        case GLFW_KEY_SCROLL_LOCK: return Key::ScrollLock;
        case GLFW_KEY_NUM_LOCK: return Key::NumLock;
        case GLFW_KEY_PRINT_SCREEN: return Key::PrintScreen;
        case GLFW_KEY_PAUSE: return Key::Pause;
        case GLFW_KEY_F1: return Key::F1;
        case GLFW_KEY_F2: return Key::F2;
        case GLFW_KEY_F3: return Key::F3;
        case GLFW_KEY_F4: return Key::F4;
        case GLFW_KEY_F5: return Key::F5;
        case GLFW_KEY_F6: return Key::F6;
        case GLFW_KEY_F7: return Key::F7;
        case GLFW_KEY_F8: return Key::F8;
        case GLFW_KEY_F9: return Key::F9;
        case GLFW_KEY_F10: return Key::F10;
        case GLFW_KEY_F11: return Key::F11;
        case GLFW_KEY_F12: return Key::F12;
        case GLFW_KEY_F13: return Key::F13;
        case GLFW_KEY_F14: return Key::F14;
        case GLFW_KEY_F15: return Key::F15;
        case GLFW_KEY_F16: return Key::F16;
        case GLFW_KEY_F17: return Key::F17;
        case GLFW_KEY_F18: return Key::F18;
        case GLFW_KEY_F19: return Key::F19;
        case GLFW_KEY_F20: return Key::F20;
        case GLFW_KEY_F21: return Key::F21;
        case GLFW_KEY_F22: return Key::F22;
        case GLFW_KEY_F23: return Key::F23;
        case GLFW_KEY_F24: return Key::F24;
        case GLFW_KEY_F25: return Key::F25;
        case GLFW_KEY_KP_0: return Key::KP_0;
        case GLFW_KEY_KP_1: return Key::KP_1;
        case GLFW_KEY_KP_2: return Key::KP_2;
        case GLFW_KEY_KP_3: return Key::KP_3;
        case GLFW_KEY_KP_4: return Key::KP_4;
        case GLFW_KEY_KP_5: return Key::KP_5;
        case GLFW_KEY_KP_6: return Key::KP_6;
        case GLFW_KEY_KP_7: return Key::KP_7;
        case GLFW_KEY_KP_8: return Key::KP_8;
        case GLFW_KEY_KP_9: return Key::KP_9;
        case GLFW_KEY_KP_DECIMAL: return Key::KP_Decimal;
        case GLFW_KEY_KP_DIVIDE: return Key::KP_Divide;
        case GLFW_KEY_KP_MULTIPLY: return Key::KP_Multiply;
        case GLFW_KEY_KP_SUBTRACT: return Key::KP_Subsract;
        case GLFW_KEY_KP_ADD: return Key::KP_Add;
        case GLFW_KEY_KP_ENTER: return Key::KP_Enter;
        case GLFW_KEY_KP_EQUAL: return Key::KP_Equal;
        case GLFW_KEY_LEFT_SHIFT: return Key::LeftShift;
        case GLFW_KEY_LEFT_CONTROL: return Key::LeftControl;
        case GLFW_KEY_LEFT_ALT: return Key::LeftAlt;
        case GLFW_KEY_LEFT_SUPER: return Key::LeftSuper;
        case GLFW_KEY_RIGHT_SHIFT: return Key::RightShift;
        case GLFW_KEY_RIGHT_CONTROL: return Key::RightControl;
        case GLFW_KEY_RIGHT_ALT: return Key::RightAlt;
        case GLFW_KEY_RIGHT_SUPER: return Key::RightSuper;
        case GLFW_KEY_MENU: return Key::Menu;
        default: return Key::Unknown;
    }
}

std::string native::keyToString(const Key& key){
    switch (key){
    /* Printable keys */
        case Key::Space: return "Space";
        case Key::Apostrophe: return "Apostrophe";
        case Key::Comma: return "Comma";
        case Key::Minus: return "Minus";
        case Key::Period: return "Period";
        case Key::Slash: return "Slash";
        case Key::_0: return "0";
        case Key::_1: return "1";
        case Key::_2: return "2";
        case Key::_3: return "3";
        case Key::_4: return "4";
        case Key::_5: return "5";
        case Key::_6: return "6";
        case Key::_7: return "7";
        case Key::_8: return "8";
        case Key::_9: return "9";
        case Key::Semicolon: return "Semicolon";
        case Key::Equal: return "Equal";
        case Key::A: return "A";
        case Key::B: return "B";
        case Key::C: return "C";
        case Key::D: return "D";
        case Key::E: return "E";
        case Key::F: return "F";
        case Key::G: return "G";
        case Key::H: return "H";
        case Key::I: return "I";
        case Key::J: return "J";
        case Key::K: return "K";
        case Key::L: return "L";
        case Key::M: return "M";
        case Key::N: return "N";
        case Key::O: return "O";
        case Key::P: return "P";
        case Key::Q: return "Q";
        case Key::R: return "R";
        case Key::S: return "S";
        case Key::T: return "T";
        case Key::U: return "U";
        case Key::V: return "V";
        case Key::W: return "W";
        case Key::X: return "X";
        case Key::Y: return "Y";
        case Key::Z: return "Z";
        case Key::LeftBracket: return "LeftBracket";
        case Key::Backslash: return "Backslash";
        case Key::RightBracket: return "RightBracket";
        case Key::GraveAccent: return "GraveAccent";
        case Key::World_1: return "World_1";
        case Key::World_2: return "World_2";

    /* Function keys */
        case Key::Escape: return "Escape";
        case Key::Enter: return "Enter";
        case Key::Tab: return "Tab";
        case Key::Backspace: return "Backspace";
        case Key::Insert: return "Insert";
        case Key::Delete: return "Delete";
        case Key::Right: return "Right";
        case Key::Left: return "Left";
        case Key::Down: return "Down";
        case Key::Up: return "Up";
        case Key::PageUp: return "PageUp";
        case Key::PageDown: return "PageDown";
        case Key::Home: return "Home";
        case Key::End: return "End";
        case Key::CapsLock: return "CapsLock";
        case Key::ScrollLock: return "ScrollLock";
        case Key::NumLock: return "NumLock";
        case Key::PrintScreen: return "PrintScreen";
        case Key::Pause: return "Pause";
        case Key::F1: return "F1";
        case Key::F2: return "F2";
        case Key::F3: return "F3";
        case Key::F4: return "F4";
        case Key::F5: return "F5";
        case Key::F6: return "F6";
        case Key::F7: return "F7";
        case Key::F8: return "F8";
        case Key::F9: return "F9";
        case Key::F10: return "F10";
        case Key::F11: return "F11";
        case Key::F12: return "F12";
        case Key::F13: return "F13";
        case Key::F14: return "F14";
        case Key::F15: return "F15";
        case Key::F16: return "F16";
        case Key::F17: return "F17";
        case Key::F18: return "F18";
        case Key::F19: return "F19";
        case Key::F20: return "F20";
        case Key::F21: return "F21";
        case Key::F22: return "F22";
        case Key::F23: return "F23";
        case Key::F24: return "F24";
        case Key::F25: return "F25";
        case Key::KP_0: return "KP_0";
        case Key::KP_1: return "KP_1";
        case Key::KP_2: return "KP_2";
        case Key::KP_3: return "KP_3";
        case Key::KP_4: return "KP_4";
        case Key::KP_5: return "KP_5";
        case Key::KP_6: return "KP_6";
        case Key::KP_7: return "KP_7";
        case Key::KP_8: return "KP_8";
        case Key::KP_9: return "KP_9";
        case Key::KP_Decimal: return "KP_Decimal";
        case Key::KP_Divide: return "KP_Divide";
        case Key::KP_Multiply: return "KP_Multiply";
        case Key::KP_Subsract: return "KP_Subsract";
        case Key::KP_Add: return "KP_Add";
        case Key::KP_Enter: return "KP_Enter";
        case Key::KP_Equal: return "KP_Equal";
        case Key::LeftShift: return "LeftShift";
        case Key::LeftControl: return "LeftControl";
        case Key::LeftAlt: return "LeftAlt";
        case Key::LeftSuper: return "LeftSuper";
        case Key::RightShift: return "RightShift";
        case Key::RightControl: return "RightControl";
        case Key::RightAlt: return "RightAlt";
        case Key::RightSuper: return "RightSuper";
        case Key::Menu: return "Menu";
        default: return "Unknown";
    }

}